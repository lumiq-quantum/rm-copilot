// This is an autogenerated file from running `genkit init`.
'use server';

/**
 * @fileOverview An AI agent that provides SQL query used and its reasoning when answering a question by querying the database.
 *
 * - sqlReasoning - A function that handles the SQL reasoning process.
 * - SqlReasoningInput - The input type for the sqlReasoning function.
 * - SqlReasoningOutput - The return type for the sqlReasoning function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SqlReasoningInputSchema = z.object({
  question: z.string().describe('The question asked by the relationship manager about the customer.'),
  sqlQuery: z.string().describe('The SQL query executed to retrieve the customer information.'),
  databaseSchema: z.string().describe('The schema of the database.'),
  queryResult: z.string().describe('The result of the SQL query.'),
});
export type SqlReasoningInput = z.infer<typeof SqlReasoningInputSchema>;

const SqlReasoningOutputSchema = z.object({
  answer: z.string().describe('The answer to the question, incorporating the SQL query and its reasoning.'),
  sqlQuery: z.string().describe('The SQL query used to retrieve the information.'),
  reasoning: z.string().describe('The reasoning behind the SQL query and how it answers the question.'),
});
export type SqlReasoningOutput = z.infer<typeof SqlReasoningOutputSchema>;

export async function sqlReasoning(input: SqlReasoningInput): Promise<SqlReasoningOutput> {
  return sqlReasoningFlow(input);
}

const prompt = ai.definePrompt({
  name: 'sqlReasoningPrompt',
  input: {schema: SqlReasoningInputSchema},
  output: {schema: SqlReasoningOutputSchema},
  prompt: `You are an expert AI assistant for relationship managers at a bank. Your task is to answer questions about customers based on data retrieved from a database.

  When answering, you MUST also provide the SQL query that was used to retrieve the information, and explain the reasoning behind the query. This will help the relationship manager understand how the information was retrieved and verify its accuracy.

  Here is the database schema:
  {{databaseSchema}}

  Here is the question asked by the relationship manager:
  {{question}}

  Here is the SQL query that was executed:
  {{sqlQuery}}

  Here is the result of the SQL query:
  {{queryResult}}

  Based on this information, please provide a comprehensive answer to the question, including the SQL query used and the reasoning behind it.
  Make sure that the answer, sqlQuery, and reasoning fields are all populated in the output.
  `,
});

const sqlReasoningFlow = ai.defineFlow(
  {
    name: 'sqlReasoningFlow',
    inputSchema: SqlReasoningInputSchema,
    outputSchema: SqlReasoningOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
